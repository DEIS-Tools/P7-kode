<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.

clock total;

const int NUM_STATIONS = 10;
const int NUM_END_STATIONS = 2;
const int MAX_ROBOTS = 5;
const double UNCERTAINTY = 1.1;

typedef int[1, NUM_STATIONS] station_t;
typedef int[1, MAX_ROBOTS] robot_t;

const robot_t CUR_ROBOT = 1;

const int ALL = (1 &lt;&lt; NUM_STATIONS) - 1; // Encoding 0b11_1111_1111. We use this variable to simulate bitwise not since UPPAAL does not support this out of the box.
const int[0, ALL] endstations = 18; // Encoding 0b00_0001_0010.

bool is_endstation(station_t id) {
    int[0, 1 &lt;&lt; NUM_STATIONS] is = endstations &amp; (1 &lt;&lt; (id - 1));

    return is != 0;
}

typedef int[CUR_ROBOT + 1, MAX_ROBOTS] other_robot_t;

const int dist[station_t][station_t] = {
    {  0,  5,  7,  5,  4,  8,  2,  3,  9, 12 },
    {  2,  0,  9, 12,  1,  2,  6,  3,  8,  4 },
    {  8,  4,  0,  1,  2, 11,  1, 14, 18,  7 },
    { 20,  4, 13,  0,  3, 12, 10,  6,  5, 16 },
    {  2,  6, 17,  3,  0,  1,  7,  9, 16, 12 },
    { 18, 11,  8, 14,  4,  0, 10, 13, 19,  5 },
    {  9, 18, 14,  8,  3,  7,  0, 13,  6,  2 },
    { 17, 10, 19,  5,  1, 12, 15,  0, 11, 20 },
    { 17, 20,  5, 12, 16, 11, 13,  9,  0,  1 },
    {  8, 10, 18,  7,  4,  6,  3, 14,  2,  0 }
};

broadcast chan arr[station_t][robot_t], done[robot_t];</declaration>
	<template>
		<name>OtherRobot</name>
		<parameter>other_robot_t id</parameter>
		<declaration>const int[0, NUM_STATIONS] order[other_robot_t][station_t] = {
    {8,  7,  3,  9,  4,  5,  0,  0,  0,  0},
    {7,  1,  6,  4,  3, 10,  8,  9,  5,  0},
    {8,  6,  7,  2,  0,  0,  0,  0,  0,  0},
    {7,  6,  2,  0,  0,  0,  0,  0,  0,  0}
};

clock x;

int[1, NUM_STATIONS + 1] step_index = 1;
station_t cur_loc;
int[0, NUM_STATIONS] dest;

int[0, NUM_STATIONS] next_station() {
    if (step_index == NUM_STATIONS + 1) {
        return 0;
    }

    return order[id][step_index++];
}</declaration>
		<location id="id0" x="-398" y="-246">
			<name x="-433" y="-289">EnRoute</name>
			<label kind="invariant" x="-484" y="-229">x &lt;= dist[cur_loc][dest] * UNCERTAINTY</label>
		</location>
		<location id="id1" x="-187" y="-51">
			<name x="-170" y="-59">Waiting</name>
		</location>
		<location id="id2" x="-637" y="-246">
			<name x="-629" y="-272">Choose</name>
			<committed/>
		</location>
		<location id="id3" x="-765" y="-246">
			<name x="-782" y="-280">Done</name>
		</location>
		<location id="id4" x="-637" y="-365">
			<name x="-647" y="-399">Start</name>
			<committed/>
		</location>
		<init ref="id4"/>
		<transition controllable="false">
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="assignment" x="-629" y="-340">x = 0,
dest = next_station()</label>
		</transition>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="-731" y="-238">dest == 0</label>
		</transition>
		<transition controllable="false">
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-500" y="-68">done[id]?</label>
			<label kind="assignment" x="-501" y="-102">x=0,
dest = next_station()</label>
			<nail x="-637" y="-51"/>
		</transition>
		<transition controllable="false">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-178" y="-204">x &gt;= dist[cur_loc][dest]</label>
			<label kind="synchronisation" x="-178" y="-187">arr[cur_loc][id]!</label>
			<label kind="assignment" x="-178" y="-170">cur_loc = dest</label>
			<nail x="-187" y="-246"/>
		</transition>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="-561" y="-238">dest != 0</label>
		</transition>
	</template>
	<template>
		<name>Robot</name>
		<declaration>clock x;

int[0, ALL] visited = 0;
const int[0, ALL] init_visited = 0;

station_t cur_loc;
station_t dest;

bool all_nonend() {
    int[0, ALL] not_end = endstations ^ ALL;
    int[0, ALL] not_visited = visited ^ ALL;
    int[0, ALL] missing = not_end &amp; not_visited;

    return missing == 0;
}

bool endstation_visited() {
    int[0, 1 &lt;&lt; NUM_STATIONS] end_visited = endstations &amp; visited;

    return end_visited != 0;
}

bool allvisited() {
    return endstation_visited();
}

bool not_visited(station_t id) {
    int[0, ALL] is = visited &amp; (1 &lt;&lt; (id - 1));

    return is == 0;
}

void set_visited(station_t id) {
    visited |= 1 &lt;&lt; (id - 1);
}


bool can_visit(station_t id) {
    if (endstation_visited()) {
        return false;
    }

    if (is_endstation(id)) {
        return not_visited(id) &amp;&amp; all_nonend();
    }

    return not_visited(id);
}

bool more_visited() {
    int[0, ALL] n = init_visited ^ visited;

    int[0, NUM_STATIONS] count = 0; 
    while (n) 
    { 
        count += n &amp; 1; 
        n &gt;&gt;= 1; 
    }

    return count &gt;= 3;
}</declaration>
		<location id="id5" x="-637" y="-246">
			<name x="-663" y="-280">Choose</name>
			<committed/>
		</location>
		<location id="id6" x="-398" y="-246">
			<name x="-433" y="-289">EnRoute</name>
			<label kind="invariant" x="-527" y="-229">x &lt;= dist[cur_loc][dest] * UNCERTAINTY</label>
		</location>
		<location id="id7" x="-187" y="-51">
			<name x="-170" y="-59">Waiting</name>
		</location>
		<init ref="id5"/>
		<transition controllable="false">
			<source ref="id7"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-501" y="-76">done[CUR_ROBOT]?</label>
			<label kind="assignment" x="-501" y="-110">x=0,
set_visited(cur_loc)</label>
			<nail x="-637" y="-51"/>
		</transition>
		<transition controllable="false">
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="-170" y="-204">x &gt;= dist[cur_loc][dest]</label>
			<label kind="synchronisation" x="-170" y="-187">arr[cur_loc][CUR_ROBOT]!</label>
			<label kind="assignment" x="-170" y="-170">cur_loc = dest</label>
			<nail x="-187" y="-246"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="select" x="-569" y="-297">id : station_t</label>
			<label kind="guard" x="-569" y="-280">can_visit(id)</label>
			<label kind="assignment" x="-569" y="-263">dest = id</label>
		</transition>
	</template>
	<template>
		<name>Station</name>
		<parameter>station_t station_id</parameter>
		<declaration>const int MAX_QUEUE = 10;

clock proc;

int[0, MAX_ROBOTS] list[MAX_QUEUE];
int[0, MAX_QUEUE] num_in_queue = 0;

// Put an element at the end of the queue
void enqueue(robot_t element)
{
    list[num_in_queue++] = element;

    if (num_in_queue == 1) {
        proc = 0;
    }
}

// Remove the front element of the queue
void dequeue()
{
    int i = 0;
    num_in_queue -= 1;
    while (i &lt; num_in_queue)
    {
        list[i] = list[i + 1];
        i++;
    }
    list[i] = 0;
}

// Returns the front element of the queue
robot_t front()
{
   return list[0];
}</declaration>
		<location id="id8" x="-442" y="-348">
			<name x="-425" y="-374">Idle</name>
			<label kind="invariant" x="-646" y="-340">proc &lt;= 6 * UNCERTAINTY</label>
		</location>
		<location id="id9" x="-654" y="-476">
			<name x="-705" y="-510">CDeQ</name>
			<committed/>
		</location>
		<init ref="id8"/>
		<transition controllable="false">
			<source ref="id8"/>
			<target ref="id8"/>
			<label kind="select" x="-433" y="-255">id : robot_t</label>
			<label kind="synchronisation" x="-433" y="-238">arr[station_id][id]?</label>
			<label kind="assignment" x="-433" y="-221">enqueue(id)</label>
			<nail x="-442" y="-263"/>
			<nail x="-255" y="-263"/>
			<nail x="-255" y="-348"/>
		</transition>
		<transition controllable="false">
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="guard" x="-799" y="-433">num_in_queue &gt; 0</label>
			<label kind="synchronisation" x="-799" y="-416">done[front()]!</label>
			<label kind="assignment" x="-799" y="-399">dequeue()</label>
			<nail x="-654" y="-348"/>
		</transition>
		<transition controllable="false">
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="guard" x="-636" y="-510">num_in_queue == 0</label>
			<nail x="-442" y="-476"/>
		</transition>
		<transition controllable="false">
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="guard" x="-612" y="-399">proc &gt;= 6</label>
			<label kind="assignment" x="-612" y="-416">proc = 0</label>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system OtherRobot, Robot, Station;
</system>
	<queries>
		<query>
			<formula>Pr[&lt;=150] (&lt;&gt; Robot.allvisited())</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy opt = minE (total) [&lt;=200] : &lt;&gt; Robot.allvisited()</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Pr[&lt;=150] (&lt;&gt; Robot.allvisited()) under opt</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
