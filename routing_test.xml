<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.

clock total;

const int NUM_STATIONS = 10;
const int NUM_WAYPOINTS = 28;
const int MAX_ROBOTS = 5;
const bool STOCHASTIC_ROBOTS = false;
const double robot_speed = 0.7; // Distance per time unit

typedef int[1, NUM_STATIONS] station_t;
typedef int[1, NUM_WAYPOINTS] waypoint_t;
typedef int[1, MAX_ROBOTS + 1] robot_t;

const robot_t PROB_ROBOT = 1;
const robot_t CUR_ROBOT = 2;

typedef int[CUR_ROBOT + 1, MAX_ROBOTS + 1] other_robot_t;

const int waypoint_dist[waypoint_t][waypoint_t] = {
    {-1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {-1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {-1, 1, -1, 4, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {1, -1, 4, -1, 3, -1, -1, -1, -1, -1, -1, -1, 8, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {-1, -1, -1, 3, -1, 3, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {-1, -1, -1, -1, 3, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1},
    {-1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {-1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {-1, -1, 3, -1, -1, -1, -1, 1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {-1, -1, -1, -1, 3, -1, -1, -1, -1, -1, 1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {-1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {-1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, 1, -1, 7, -1, 4, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1},
    {-1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, 7, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, 1, 3, -1, -1, -1, -1, -1, -1, -1},
    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, 7, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1},
    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 7, -1, 2, -1, -1, -1, -1, -1, 7, -1, -1, -1},
    {-1, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, 2, 7, -1, -1, -1, -1},
    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1},
    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, 2, -1, -1, -1, 8, -1, -1, -1},
    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 5, -1, -1, 12, 1, -1, -1},
    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, 8, 12, -1, -1, 1, -1},
    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1},
    {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1},
    {-1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}
};

const waypoint_t station_waypoint[station_t] = { 1, 2, 8, 12, 28, 11, 15, 20, 26, 27 };

const int arrival_rate[station_t][2] = {
    {1, 1 * 6},
    {1, 3 * 6},
    {1, 5 * 6},
    {1, 7 * 6},
    {1, 9 * 6},
    {1, 9 * 6},
    {1, 7 * 6},
    {1, 5 * 6},
    {1, 3 * 6},
    {1, 1 * 6}
};

broadcast chan arr[station_t][robot_t], 
               done[robot_t],
               nonfull[station_t],
               go[robot_t],
               queue[waypoint_t][robot_t];
bool full[station_t];</declaration>
	<template>
		<name>Waypoint</name>
		<parameter>waypoint_t id</parameter>
		<declaration>const int MAX_QUEUE = 10;

clock x;

int[0, MAX_ROBOTS + 1] list[MAX_QUEUE + 1];
int[0, MAX_QUEUE] num_in_queue = 0;

// Put an element at the end of the queue
void enqueue(robot_t element)
{
    list[num_in_queue++] = element;
}

// Remove the front element of the queue
void dequeue()
{
    int i = 0;
    num_in_queue -= 1;
    while (i &lt; num_in_queue)
    {
        list[i] = list[i + 1];
        i++;
    }
    list[i] = 0;
    x = 0;
}

// Returns the front element of the queue
robot_t front()
{
   return list[0];
}

// Returns the last element of the queue
robot_t tail()
{
   return list[num_in_queue - 1];
}

int passing_time() {
    for (station_id : station_t) {
        if (station_waypoint[station_id] == id) {
            return 0;
        }
    }

    return 6;
}</declaration>
		<location id="id0" x="-212" y="-34">
			<name x="-255" y="-25">Idle</name>
			<label kind="invariant" x="-289" y="-8">x &lt;= 10</label>
		</location>
		<location id="id1" x="-59" y="-34">
			<name x="-42" y="-25">Passing</name>
			<label kind="invariant" x="-42" y="-8">x &lt;= passing_time()</label>
		</location>
		<init ref="id0"/>
		<transition controllable="false">
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="select" x="0" y="-102">robot_id : robot_t</label>
			<label kind="guard" x="0" y="-85">num_in_queue &lt; MAX_QUEUE</label>
			<label kind="synchronisation" x="0" y="-68">queue[id][robot_id]?</label>
			<label kind="assignment" x="0" y="-51">enqueue(robot_id)</label>
			<nail x="-8" y="-85"/>
			<nail x="-8" y="-34"/>
		</transition>
		<transition controllable="false">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="assignment" x="-170" y="-42">x = 0</label>
			<nail x="-178" y="-59"/>
			<nail x="-178" y="-8"/>
		</transition>
		<transition controllable="false">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="select" x="-391" y="-102">robot_id : robot_t</label>
			<label kind="guard" x="-484" y="-85">num_in_queue &lt; MAX_QUEUE</label>
			<label kind="synchronisation" x="-416" y="-68">queue[id][robot_id]?</label>
			<label kind="assignment" x="-399" y="-51">enqueue(robot_id)</label>
			<nail x="-263" y="-85"/>
			<nail x="-263" y="-34"/>
		</transition>
		<transition controllable="false">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-204" y="34">x == passing_time()</label>
			<nail x="-59" y="25"/>
			<nail x="-212" y="25"/>
		</transition>
		<transition controllable="false">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-194" y="-127">num_in_queue &gt; 0</label>
			<label kind="synchronisation" x="-194" y="-110">go[front()]!</label>
			<label kind="assignment" x="-194" y="-93">dequeue()</label>
			<nail x="-212" y="-93"/>
			<nail x="-59" y="-93"/>
		</transition>
	</template>
	<template>
		<name>OtherRobot</name>
		<parameter>other_robot_t id</parameter>
		<declaration>const int[0, NUM_WAYPOINTS] order[other_robot_t][NUM_WAYPOINTS * NUM_STATIONS] = {
    {13,16,20,16,21,23,17,18,15,18,17,14,10,5,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {26,24,25,27,25,23,21,16,13,12,13,9,8,9,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {17,18,15,18,19,7,6,28,6,5,10,11,10,14,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {13,14,4,13,14,4,13,14,4,13,14,4,13,14,4,13,14,4,13,14,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
};

clock x;

int[0, NUM_WAYPOINTS * NUM_STATIONS - 1] step_index = 0;
waypoint_t cur;
int[0, NUM_WAYPOINTS] dest;

int[0, NUM_WAYPOINTS] next_waypoint() {
    return order[id][step_index++];
}

int[0, NUM_STATIONS] station() {
    for (station_id : station_t) {
        if (station_waypoint[station_id] == cur) {
            return station_id;
        }
    }

    return 0;
}

double time_between_waypoints() {
    return waypoint_dist[cur][dest] / robot_speed;
}</declaration>
		<location id="id2" x="-484" y="-8">
			<name x="-501" y="17">Reset</name>
			<committed/>
		</location>
		<location id="id3" x="-484" y="-246">
			<name x="-544" y="-297">BetweenWaypoints</name>
			<label kind="invariant" x="-544" y="-280">x &lt;= time_between_waypoints()</label>
		</location>
		<location id="id4" x="-637" y="-246">
			<name x="-647" y="-280">Choose</name>
			<urgent/>
		</location>
		<location id="id5" x="-765" y="-246">
			<name x="-775" y="-280">Done</name>
		</location>
		<location id="id6" x="-484" y="-93">
			<name x="-586" y="-110">AtWaypoint</name>
			<label kind="invariant" x="-552" y="-93">x &lt;= 6</label>
		</location>
		<location id="id7" x="187" y="85">
			<name x="204" y="77">WaitForQueue</name>
		</location>
		<location id="id8" x="-59" y="-8">
			<name x="-42" y="-25">Arriving</name>
			<urgent/>
		</location>
		<location id="id9" x="-313" y="-8">
			<name x="-338" y="9">Waiting</name>
		</location>
		<location id="id10" x="-323" y="-93">
			<name x="-306" y="-102">Holding</name>
		</location>
		<init ref="id4"/>
		<transition controllable="false">
			<source ref="id10"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-442" y="-110">go[id]?</label>
		</transition>
		<transition controllable="false">
			<source ref="id9"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-433" y="-25">done[id]?</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id8"/>
			<label kind="guard" x="-238" y="-280">x == time_between_waypoints()
&amp;&amp; station() != 0</label>
			<label kind="assignment" x="-238" y="-246">cur = dest</label>
			<nail x="-59" y="-246"/>
		</transition>
		<transition controllable="false">
			<source ref="id6"/>
			<target ref="id2"/>
			<label kind="guard" x="-544" y="-68">x == 6</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id10"/>
			<label kind="guard" x="-467" y="-212">x == time_between_waypoints()
&amp;&amp; station() == 0</label>
			<label kind="synchronisation" x="-467" y="-178">queue[dest][id]!</label>
			<label kind="assignment" x="-467" y="-161">cur = dest</label>
			<nail x="-485" y="-178"/>
			<nail x="-324" y="-178"/>
		</transition>
		<transition controllable="false">
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="-731" y="-238">dest == 0</label>
		</transition>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="assignment" x="-816" y="-93">dest = next_waypoint()</label>
			<nail x="-637" y="-8"/>
		</transition>
		<transition controllable="false">
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="guard" x="-612" y="-238">dest != 0</label>
			<label kind="assignment" x="-612" y="-221">x = 0</label>
		</transition>
		<transition controllable="false">
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="9" y="68">nonfull[station()]?</label>
		</transition>
		<transition controllable="false">
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="guard" x="60" y="-33">full[station()]</label>
			<nail x="187" y="-8"/>
		</transition>
		<transition controllable="false">
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="guard" x="-262" y="18">!full[station()]</label>
			<label kind="synchronisation" x="-262" y="1">arr[station()][id]!</label>
		</transition>
	</template>
	<template>
		<name>Arrival</name>
		<parameter>station_t id</parameter>
		<location id="id11" x="8" y="0">
			<label kind="exponentialrate" x="34" y="-8">arrival_rate[id][0]:arrival_rate[id][1]</label>
		</location>
		<init ref="id11"/>
		<transition controllable="false">
			<source ref="id11"/>
			<target ref="id11"/>
			<label kind="guard" x="-170" y="17">STOCHASTIC_ROBOTS</label>
			<label kind="synchronisation" x="-127" y="-136">arr[id][PROB_ROBOT]!</label>
			<nail x="-170" y="0"/>
			<nail x="-170" y="-119"/>
			<nail x="8" y="-119"/>
		</transition>
	</template>
	<template>
		<name>Robot</name>
		<declaration>clock x;

bool visited[station_t];
station_t cur_loc;
station_t dest;


bool used[waypoint_t];
waypoint_t cur_waypoint;
waypoint_t dest_waypoint;

bool allvisited() {
    for (id : station_t) {
        if (!visited[id]) {
            return false;
        }
    }

    return true;
}

bool morevisited() {
    int i = 0;

    for (id : station_t) {
        if (visited[id]) {
            i++;
        }
    }

    return i &gt;= 3;
}

void clear_waypoints() {
    for (id : waypoint_t) {
        used[id] = false;
    }
}

double time_between_waypoints() {
    return waypoint_dist[cur_waypoint][dest_waypoint] / robot_speed;
}</declaration>
		<location id="id12" x="-25" y="-399">
			<name x="0" y="-408">Holding</name>
		</location>
		<location id="id13" x="-399" y="-399">
			<name x="-501" y="-442">BetweenWaypoints</name>
			<label kind="invariant" x="-654" y="-408">x &lt;= time_between_waypoints()</label>
		</location>
		<location id="id14" x="237" y="42">
			<name x="254" y="34">WaitForQueue</name>
		</location>
		<location id="id15" x="-637" y="-246">
			<name x="-714" y="-272">Choose</name>
			<urgent/>
		</location>
		<location id="id16" x="-398" y="-246">
			<name x="-476" y="-272">EnRoute</name>
			<committed/>
		</location>
		<location id="id17" x="-9" y="-51">
			<name x="8" y="-68">Arriving</name>
			<urgent/>
		</location>
		<location id="id18" x="-263" y="-51">
			<name x="-288" y="-34">Waiting</name>
		</location>
		<init ref="id16"/>
		<transition controllable="false">
			<source ref="id16"/>
			<target ref="id17"/>
			<label kind="guard" x="-178" y="-178">station_waypoint[dest] == cur_waypoint</label>
			<label kind="assignment" x="-178" y="-161">cur_loc = dest</label>
		</transition>
		<transition controllable="false">
			<source ref="id12"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-221" y="-272">go[CUR_ROBOT]?</label>
			<nail x="-25" y="-246"/>
		</transition>
		<transition controllable="false">
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="guard" x="-331" y="-459">x == time_between_waypoints()</label>
			<label kind="synchronisation" x="-331" y="-442">queue[dest_waypoint][CUR_ROBOT]!</label>
			<label kind="assignment" x="-331" y="-425">cur_waypoint = dest_waypoint</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id13"/>
			<label kind="select" x="-391" y="-374">id : waypoint_t</label>
			<label kind="guard" x="-391" y="-357">!used[id] &amp;&amp; 
waypoint_dist[cur_waypoint][id] != -1 &amp;&amp;
station_waypoint[dest] != cur_waypoint</label>
			<label kind="assignment" x="-391" y="-306">dest_waypoint = id,
x = 0</label>
		</transition>
		<transition controllable="false">
			<source ref="id14"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="59" y="25">nonfull[cur_loc]?</label>
		</transition>
		<transition controllable="false">
			<source ref="id17"/>
			<target ref="id14"/>
			<label kind="guard" x="110" y="-76">full[cur_loc]</label>
			<nail x="237" y="-51"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id18"/>
			<label kind="guard" x="-212" y="-25">!full[cur_loc]</label>
			<label kind="synchronisation" x="-212" y="-42">arr[cur_loc][CUR_ROBOT]!</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-501" y="-68">done[CUR_ROBOT]?</label>
			<label kind="assignment" x="-501" y="-51">x=0,
visited[cur_loc]=true,
clear_waypoints()</label>
			<nail x="-637" y="-51"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id16"/>
			<label kind="select" x="-569" y="-297">id : station_t</label>
			<label kind="guard" x="-569" y="-280">!visited[id]</label>
			<label kind="assignment" x="-569" y="-263">dest = id</label>
		</transition>
	</template>
	<template>
		<name>Station</name>
		<parameter>station_t station_id</parameter>
		<declaration>const int MAX_QUEUE = 10;

clock proc;

int[0, MAX_ROBOTS + 1] list[MAX_QUEUE + 1];
int[0, MAX_QUEUE] num_in_queue = 0;

// Put an element at the end of the queue
void enqueue(robot_t element)
{
    list[num_in_queue++] = element;
    full[station_id] = num_in_queue == MAX_QUEUE;

    if (num_in_queue == 1) {
        proc = 0;
    }
}

// Remove the front element of the queue
void dequeue()
{
    int i = 0;
    num_in_queue -= 1;
    while (i &lt; num_in_queue)
    {
        list[i] = list[i + 1];
        i++;
    }
    list[i] = 0;
    full[station_id] = false;
}

// Returns the front element of the queue
robot_t front()
{
   return list[0];
}

// Returns the last element of the queue
robot_t tail()
{
   return list[num_in_queue - 1];
}</declaration>
		<location id="id19" x="-442" y="-348">
			<name x="-476" y="-382">Idle</name>
			<label kind="invariant" x="-476" y="-331">proc &lt;= 6</label>
		</location>
		<location id="id20" x="-654" y="-476">
			<name x="-705" y="-510">CDeQ</name>
			<committed/>
		</location>
		<location id="id21" x="-654" y="-348">
			<committed/>
		</location>
		<init ref="id19"/>
		<transition controllable="false">
			<source ref="id21"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-620" y="-365">nonfull[station_id]!</label>
		</transition>
		<transition controllable="false">
			<source ref="id19"/>
			<target ref="id19"/>
			<label kind="select" x="-654" y="-263">other : other_robot_t</label>
			<label kind="synchronisation" x="-654" y="-246">arr[station_id][other]?</label>
			<label kind="assignment" x="-654" y="-229">enqueue(other)</label>
			<nail x="-467" y="-272"/>
			<nail x="-654" y="-272"/>
			<nail x="-654" y="-331"/>
			<nail x="-476" y="-331"/>
		</transition>
		<transition controllable="false">
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="guard" x="-799" y="-433">num_in_queue &gt; 0</label>
			<label kind="synchronisation" x="-799" y="-416">done[front()]!</label>
			<label kind="assignment" x="-799" y="-399">dequeue()</label>
		</transition>
		<transition controllable="false">
			<source ref="id20"/>
			<target ref="id19"/>
			<label kind="guard" x="-636" y="-510">num_in_queue == 0</label>
			<nail x="-459" y="-476"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-408" y="-263">arr[station_id][CUR_ROBOT]?</label>
			<label kind="assignment" x="-408" y="-246">enqueue(CUR_ROBOT)</label>
			<nail x="-416" y="-272"/>
			<nail x="-221" y="-272"/>
			<nail x="-221" y="-331"/>
			<nail x="-416" y="-331"/>
		</transition>
		<transition controllable="false">
			<source ref="id19"/>
			<target ref="id20"/>
			<label kind="guard" x="-612" y="-399">proc &gt;= 5</label>
			<label kind="assignment" x="-612" y="-416">proc = 0</label>
		</transition>
		<transition controllable="false">
			<source ref="id19"/>
			<target ref="id19"/>
			<label kind="guard" x="-391" y="-535">num_in_queue &lt; MAX_QUEUE</label>
			<label kind="synchronisation" x="-391" y="-518">arr[station_id][PROB_ROBOT]?</label>
			<label kind="assignment" x="-391" y="-501">enqueue(PROB_ROBOT)</label>
			<nail x="-229" y="-348"/>
			<nail x="-229" y="-476"/>
			<nail x="-399" y="-476"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Waypoint, OtherRobot, Robot, Arrival, Station;
</system>
	<queries>
		<query>
			<formula>Pr[&lt;=1] (&lt;&gt; Robot.morevisited())</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy opt = minE (total) [&lt;=300] : &lt;&gt; Robot.morevisited()</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Pr[&lt;=140] (&lt;&gt; Robot.morevisited()) under opt</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Robot.allvisited()</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy Safe = control: A&lt;&gt; Robot.allvisited()</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
