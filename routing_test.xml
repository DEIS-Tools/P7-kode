<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.

clock total;

const int NUM_STATIONS = 10;
const int NUM_END_STATIONS = 2;
const int MAX_ROBOTS = 5;

typedef int[1, NUM_STATIONS] station_t;
typedef int[1, MAX_ROBOTS] robot_t;

const robot_t CUR_ROBOT = 1;

const station_t end_stations[NUM_END_STATIONS] = { 5, 2 };

bool is_endstation(station_t id) {
    for (i : int[0, NUM_END_STATIONS - 1]) {
        if (id == end_stations[i]) {
            return true;
        }
    }

    return false;
}

typedef int[CUR_ROBOT + 1, MAX_ROBOTS] other_robot_t;

const int dist[station_t][station_t] = {
    {  0,  5,  7,  5,  4,  8,  2,  3,  9, 12 },
    {  2,  0,  9, 12,  1,  2,  6,  3,  8,  4 },
    {  8,  4,  0,  1,  2, 11,  1, 14, 18,  7 },
    { 20,  4, 13,  0,  3, 12, 10,  6,  5, 16 },
    {  2,  6, 17,  3,  0,  1,  7,  9, 16, 12 },
    { 18, 11,  8, 14,  4,  0, 10, 13, 19,  5 },
    {  9, 18, 14,  8,  3,  7,  0, 13,  6,  2 },
    { 17, 10, 19,  5,  1, 12, 15,  0, 11, 20 },
    { 17, 20,  5, 12, 16, 11, 13,  9,  0,  1 },
    {  8, 10, 18,  7,  4,  6,  3, 14,  2,  0 }
};

broadcast chan arr[station_t][robot_t], done[robot_t], place[station_t];
bool full[station_t];</declaration>
	<template>
		<name>OtherRobot</name>
		<parameter>other_robot_t id</parameter>
		<declaration>const int[0, NUM_STATIONS] order[other_robot_t][station_t] = {
    {8,  7,  3,  9,  4,  0,  0,  0,  0,  0},
    {2,  1,  6,  4,  3, 10,  8,  9,  7,  0},
    {8,  6,  2,  7,  0,  0,  0,  0,  0,  0},
    {2,  6,  7,  0,  0,  0,  0,  0,  0,  0}
};

clock x;

int[1, NUM_STATIONS + 1] step_index = 1;
station_t cur_loc;
int[0, NUM_STATIONS] dest;

int[0, NUM_STATIONS] next_station() {
    if (step_index == NUM_STATIONS + 1) {
        return 0;
    }

    return order[id][step_index++];
}</declaration>
		<location id="id0" x="-398" y="-246">
			<name x="-433" y="-289">EnRoute</name>
			<label kind="invariant" x="-467" y="-229">x &lt;= dist[cur_loc][dest]</label>
		</location>
		<location id="id1" x="-187" y="-246">
			<name x="-170" y="-272">Arriving</name>
			<urgent/>
		</location>
		<location id="id2" x="-187" y="-51">
			<name x="-170" y="-59">Waiting</name>
		</location>
		<location id="id3" x="-25" y="-170">
			<name x="-8" y="-187">WaitForQueue</name>
		</location>
		<location id="id4" x="-637" y="-246">
			<name x="-629" y="-272">Choose</name>
			<committed/>
		</location>
		<location id="id5" x="-765" y="-246">
			<name x="-782" y="-280">Done</name>
		</location>
		<location id="id6" x="-637" y="-365">
			<name x="-647" y="-399">Start</name>
			<committed/>
		</location>
		<init ref="id6"/>
		<transition controllable="false">
			<source ref="id6"/>
			<target ref="id4"/>
			<label kind="assignment" x="-629" y="-340">x = 0,
dest = next_station()</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-17" y="-255">place[cur_loc]?</label>
			<nail x="-25" y="-246"/>
		</transition>
		<transition controllable="false">
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="-731" y="-238">dest == 0</label>
		</transition>
		<transition controllable="false">
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="guard" x="-153" y="-212">full[cur_loc]</label>
		</transition>
		<transition controllable="false">
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="-178" y="-170">!full[cur_loc]</label>
			<label kind="synchronisation" x="-178" y="-153">arr[cur_loc][id]!</label>
		</transition>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-500" y="-68">done[id]?</label>
			<label kind="assignment" x="-501" y="-102">x=0,
dest = next_station()</label>
			<nail x="-637" y="-51"/>
		</transition>
		<transition controllable="false">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-340" y="-289">x &gt;= dist[cur_loc][dest]</label>
			<label kind="assignment" x="-340" y="-272">cur_loc = dest</label>
		</transition>
		<transition controllable="false">
			<source ref="id4"/>
			<target ref="id0"/>
			<label kind="guard" x="-561" y="-238">dest != 0</label>
		</transition>
	</template>
	<template>
		<name>Robot</name>
		<declaration>clock x;

bool visited[station_t] = {false, false, false, false, false, false, false, false, false, false};


station_t cur_loc;
station_t dest;

bool missing_nonend() {
    for (id : station_t) {
        if (!is_endstation(id) &amp;&amp; !visited[id]) {
            return true;
        }
    }

    return false;
}

bool endstation_visited() {
    for (id : station_t) {
        if (is_endstation(id) &amp;&amp; visited[id]) {
            return true;
        }
    }

    return false;
}

bool allvisited() {
    return endstation_visited();
}


bool can_visit(station_t id) {
    if (allvisited()) {
        return false;
    }

    if (is_endstation(id)) {
        return !visited[id] &amp;&amp; !missing_nonend();
    }

    return !visited[id];
}

int[0,NUM_STATIONS] completed() {
    int[0,NUM_STATIONS] i = 0;

    for (id : station_t) {
        i += visited[id];
    }

    return i;
}</declaration>
		<location id="id7" x="59" y="-153">
			<name x="76" y="-161">WaitForQueue</name>
		</location>
		<location id="id8" x="-637" y="-246">
			<name x="-663" y="-280">Choose</name>
			<committed/>
		</location>
		<location id="id9" x="-398" y="-246">
			<name x="-433" y="-289">EnRoute</name>
			<label kind="invariant" x="-467" y="-229">x &lt;= dist[cur_loc][dest]</label>
		</location>
		<location id="id10" x="-187" y="-246">
			<name x="-170" y="-263">Arriving</name>
			<urgent/>
		</location>
		<location id="id11" x="-187" y="-51">
			<name x="-170" y="-59">Waiting</name>
		</location>
		<location id="id12" x="-790" y="-246">
			<name x="-807" y="-280">Done</name>
		</location>
		<init ref="id8"/>
		<transition controllable="false">
			<source ref="id8"/>
			<target ref="id12"/>
			<label kind="guard" x="-748" y="-238">allvisited()</label>
		</transition>
		<transition controllable="false">
			<source ref="id7"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-127" y="-212">place[cur_loc]?</label>
		</transition>
		<transition controllable="false">
			<source ref="id10"/>
			<target ref="id7"/>
			<label kind="guard" x="-68" y="-263">full[cur_loc]</label>
			<nail x="59" y="-246"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="guard" x="-178" y="-178">!full[cur_loc]</label>
			<label kind="synchronisation" x="-178" y="-161">arr[cur_loc][CUR_ROBOT]!</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-500" y="-68">done[CUR_ROBOT]?</label>
			<label kind="assignment" x="-501" y="-102">x=0,
visited[cur_loc]=true</label>
			<nail x="-637" y="-51"/>
		</transition>
		<transition controllable="false">
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="guard" x="-340" y="-289">x &gt;= dist[cur_loc][dest]</label>
			<label kind="assignment" x="-340" y="-272">cur_loc = dest</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="select" x="-569" y="-297">id : station_t</label>
			<label kind="guard" x="-569" y="-280">can_visit(id)</label>
			<label kind="assignment" x="-569" y="-263">dest = id</label>
		</transition>
	</template>
	<template>
		<name>Station</name>
		<parameter>station_t station_id</parameter>
		<declaration>const int MAX_QUEUE = 10;

clock proc;

int[0, MAX_ROBOTS + 1] list[MAX_QUEUE + 1];
int[0, MAX_QUEUE] num_in_queue = 0;

// Put an element at the end of the queue
void enqueue(robot_t element)
{
    list[num_in_queue++] = element;
    full[station_id] = num_in_queue == MAX_QUEUE;

    if (num_in_queue == 1) {
        proc = 0;
    }
}

// Remove the front element of the queue
void dequeue()
{
    int i = 0;
    num_in_queue -= 1;
    while (i &lt; num_in_queue)
    {
        list[i] = list[i + 1];
        i++;
    }
    list[i] = 0;
    full[station_id] = false;
}

// Returns the front element of the queue
robot_t front()
{
   return list[0];
}

// Returns the last element of the queue
robot_t tail()
{
   return list[num_in_queue - 1];
}</declaration>
		<location id="id13" x="-442" y="-348">
			<name x="-425" y="-374">Idle</name>
			<label kind="invariant" x="-527" y="-340">proc &lt;= 6</label>
		</location>
		<location id="id14" x="-654" y="-476">
			<name x="-705" y="-510">CDeQ</name>
			<committed/>
		</location>
		<location id="id15" x="-654" y="-348">
			<committed/>
		</location>
		<init ref="id13"/>
		<transition controllable="false">
			<source ref="id15"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-620" y="-365">place[station_id]!</label>
		</transition>
		<transition controllable="false">
			<source ref="id13"/>
			<target ref="id13"/>
			<label kind="select" x="-433" y="-255">id : robot_t</label>
			<label kind="synchronisation" x="-433" y="-238">arr[station_id][id]?</label>
			<label kind="assignment" x="-433" y="-221">enqueue(id)</label>
			<nail x="-442" y="-263"/>
			<nail x="-255" y="-263"/>
			<nail x="-255" y="-348"/>
		</transition>
		<transition controllable="false">
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="guard" x="-799" y="-433">num_in_queue &gt; 0</label>
			<label kind="synchronisation" x="-799" y="-416">done[front()]!</label>
			<label kind="assignment" x="-799" y="-399">dequeue()</label>
		</transition>
		<transition controllable="false">
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="guard" x="-636" y="-510">num_in_queue == 0</label>
			<nail x="-442" y="-476"/>
		</transition>
		<transition controllable="false">
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="guard" x="-612" y="-399">proc &gt;= 6</label>
			<label kind="assignment" x="-612" y="-416">proc = 0</label>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system OtherRobot, Robot, Station;
</system>
	<queries>
		<query>
			<formula>Pr[&lt;=1000] (&lt;&gt; Robot.completed() == 0)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy opt = minE (total) [&lt;=1000] : &lt;&gt; Robot.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Pr[&lt;=120] (&lt;&gt; Robot.Done) under opt</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Robot.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy Safe = control: A&lt;&gt; Robot.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Robot.Done &amp;&amp; total &lt; 150</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
