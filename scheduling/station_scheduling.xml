<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>/*Copyright 2019 Anders Madsen, Emil Jørgensen Njor, Emil Stenderup Bækdahl, Frederik Baymler
 *Mathiesen, Nikolaj Jensen Ulrik, Simon Mejlby Virenfeldt
 *
 *Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 *associated documentation files (the "Software"), to deal in the Software without restriction,
 *including without limitation the rights to use, copy, modify, merge, publish, distribute,
 *sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
 *furnished to do so, subject to the following conditions:
 *
 *The above copyright notice and this permission notice shall be included in all copies or
 *substantial portions of the Software.
 *
 *THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
 *NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 *DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
 *OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

hybrid clock total;

import "libconfig.so" {
    int number_of_stations();
    int number_of_end_stations();
    int number_of_robots();
    int station_passing_time();
    double uncertainty();
    double get_station_dist(int from, int to);
    double eta(int robot);
    int convert_to_waypoint_id(int station);
    int destination(int robot);
};

const int NUM_STATIONS = number_of_stations();
const int NUM_END_STATIONS = number_of_end_stations();
const int NUM_ROBOTS = number_of_robots();
const int STATION_PASSING_TIME = station_passing_time();
const double UNCERTAINTY = uncertainty();

import "libconfig.so" {
    int[1, NUM_STATIONS] next_station(int robot);
    void station_visited(int num_stations, bool&amp; arr[int[1, NUM_STATIONS]]);
};

bool visited[int[1, NUM_ROBOTS]][int[1, NUM_STATIONS]];
bool robot_done[int[1, NUM_ROBOTS]];

broadcast chan arr[int[1, NUM_STATIONS]][int[1, NUM_ROBOTS]], done[int[1, NUM_ROBOTS]];

bool all_done() {
    for (id : int[1, NUM_ROBOTS]) {
        if (!robot_done[id]) {
            return false;
        }
    }

    return true;
}</declaration>
	<template>
		<name>Supervisor</name>
		<location id="id0" x="0" y="0">
			<name x="25" y="-17">Supervisor</name>
			<label kind="invariant" x="25" y="0">total' == (!all_done())</label>
		</location>
		<init ref="id0"/>
	</template>
	<template>
		<name>Robot</name>
		<parameter>int[1, NUM_ROBOTS] id</parameter>
		<declaration>clock x;

int[1, NUM_STATIONS] cur_loc;
int[1, NUM_STATIONS] dest;
double robot_eta;
int initial_station;

bool is_endstation(int[1, NUM_STATIONS] id) {
    return id &lt;= NUM_END_STATIONS;
}

bool all_nonend() {
    for (sid : int[1, NUM_STATIONS]) {
        if (!is_endstation(sid) &amp;&amp; !visited[id][sid]) {
            return false;
        }
    }

    return true;
}

bool endstation_visited() {
    for (sid : int[1, NUM_STATIONS]) {
        if (is_endstation(sid) &amp;&amp; visited[id][sid]) {
            return true;
        }
    }

    return false;
}

bool allvisited() {
    return endstation_visited();
}

bool can_visit(int[1, NUM_STATIONS] sid) {
    if (sid == cur_loc) {
        return false;
    }

    if (endstation_visited()) {
        return false;
    }

    if (is_endstation(sid)) {
        return !visited[id][sid] &amp;&amp; all_nonend();
    }

    return !visited[id][sid];
}

void set_global() {
    initial_station = destination(id);
    cur_loc = next_station(id);
    robot_eta = eta(id);
    // station_visited(NUM_STATIONS, visited);
}

int converted_cur() {
    return convert_to_waypoint_id(cur_loc);
}

int converted_dest() {
    return convert_to_waypoint_id(dest);
}</declaration>
		<location id="id1" x="-637" y="-246">
			<name x="-705" y="-238">Choose</name>
			<committed/>
		</location>
		<location id="id2" x="-365" y="-246">
			<name x="-400" y="-289">EnRoute</name>
			<label kind="invariant" x="-527" y="-229">x &lt;= get_station_dist(cur_loc, dest) * UNCERTAINTY</label>
		</location>
		<location id="id3" x="-153" y="-51">
			<name x="-136" y="-59">Waiting</name>
		</location>
		<location id="id4" x="-952" y="-246">
			<name x="-1020" y="-255">Done</name>
		</location>
		<location id="id5" x="-637" y="-374">
			<name x="-603" y="-382">ToNext</name>
			<label kind="invariant" x="-603" y="-365">x &lt;= robot_eta * UNCERTAINTY</label>
		</location>
		<location id="id6" x="-637" y="-493">
			<name x="-647" y="-527">Start</name>
			<committed/>
		</location>
		<init ref="id6"/>
		<transition controllable="false">
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="assignment" x="-629" y="-459">set_global()</label>
		</transition>
		<transition controllable="false">
			<source ref="id5"/>
			<target ref="id1"/>
			<label kind="guard" x="-756" y="-340">x &gt;= robot_eta</label>
			<label kind="assignment" x="-756" y="-323">x = 0</label>
		</transition>
		<transition controllable="false">
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="guard" x="-909" y="-263">allvisited()</label>
			<label kind="assignment" x="-909" y="-246">robot_done[id] = true</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-501" y="-76">done[id]?</label>
			<label kind="assignment" x="-501" y="-110">x=0,
visited[id][cur_loc] = true</label>
			<nail x="-637" y="-51"/>
		</transition>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="-136" y="-204">x &gt;= get_station_dist(cur_loc, dest)</label>
			<label kind="synchronisation" x="-136" y="-187">arr[cur_loc][id]!</label>
			<label kind="assignment" x="-136" y="-170">cur_loc = dest</label>
			<nail x="-153" y="-246"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="select" x="-595" y="-297">sid : int[1, NUM_STATIONS]</label>
			<label kind="guard" x="-595" y="-280">can_visit(sid)</label>
			<label kind="assignment" x="-595" y="-263">dest = sid</label>
		</transition>
	</template>
	<template>
		<name>Station</name>
		<parameter>int[1, NUM_STATIONS] station_id</parameter>
		<declaration>const int MAX_QUEUE = NUM_ROBOTS;

clock proc;

int[0, NUM_ROBOTS] list[MAX_QUEUE];
int[0, MAX_QUEUE] num_in_queue = 0;

// Put an element at the end of the queue
void enqueue(int[1, NUM_ROBOTS] element)
{
    list[num_in_queue++] = element;

    if (num_in_queue == 1) {
        proc = 0;
    }
}

// Remove the front element of the queue
void dequeue()
{
    int i = 0;
    num_in_queue -= 1;
    while (i &lt; num_in_queue)
    {
        list[i] = list[i + 1];
        i++;
    }
    list[i] = 0;
}

// Returns the front element of the queue
int[1, NUM_ROBOTS] front()
{
   return list[0];
}</declaration>
		<location id="id7" x="-442" y="-348">
			<name x="-416" y="-365">Idle</name>
			<label kind="invariant" x="-833" y="-340">proc &lt;= STATION_PASSING_TIME * UNCERTAINTY</label>
		</location>
		<location id="id8" x="-654" y="-476">
			<name x="-705" y="-510">CDeQ</name>
			<committed/>
		</location>
		<location id="id9" x="-280" y="-476">
			<name x="-290" y="-510">Start</name>
			<committed/>
		</location>
		<init ref="id9"/>
		<transition controllable="false">
			<source ref="id9"/>
			<target ref="id7"/>
		</transition>
		<transition controllable="false">
			<source ref="id7"/>
			<target ref="id7"/>
			<label kind="select" x="-433" y="-255">id : int[1, NUM_ROBOTS]</label>
			<label kind="synchronisation" x="-433" y="-238">arr[station_id][id]?</label>
			<label kind="assignment" x="-433" y="-221">enqueue(id)</label>
			<nail x="-442" y="-263"/>
			<nail x="-255" y="-263"/>
			<nail x="-255" y="-348"/>
		</transition>
		<transition controllable="false">
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="guard" x="-799" y="-433">num_in_queue &gt; 0</label>
			<label kind="synchronisation" x="-799" y="-416">done[front()]!</label>
			<label kind="assignment" x="-799" y="-399">dequeue()</label>
			<nail x="-654" y="-348"/>
		</transition>
		<transition controllable="false">
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="guard" x="-636" y="-510">num_in_queue == 0</label>
			<nail x="-442" y="-476"/>
		</transition>
		<transition controllable="false">
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="guard" x="-612" y="-399">proc &gt;= STATION_PASSING_TIME</label>
			<label kind="assignment" x="-612" y="-416">proc = 0</label>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Robot, Station, Supervisor;
</system>
	<queries>
		<query>
			<formula>strategy plan = minE (total) [&lt;=1000] : &lt;&gt; all_done()</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Pr[&lt;=130] (&lt;&gt; all_done())</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Pr[&lt;=130] (&lt;&gt; all_done()) under plan</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;= 100] {
    Robot(1).dest, Robot(2).dest, Robot(3).dest, Robot(4).dest, Robot(5).dest,
    Robot(1).Done + NUM_STATIONS + 1, Robot(2).Done + NUM_STATIONS + 1, Robot(3).Done + NUM_STATIONS + 1, Robot(4).Done + NUM_STATIONS + 1, Robot(5).Done + NUM_STATIONS + 1
}</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;= 1000] {
    Robot(1).dest, Robot(2).dest, Robot(3).dest, Robot(4).dest, Robot(5).dest,
    Robot(1).Done + NUM_STATIONS + 1, Robot(2).Done + NUM_STATIONS + 1, Robot(3).Done + NUM_STATIONS + 1, Robot(4).Done + NUM_STATIONS + 1, Robot(5).Done + NUM_STATIONS + 1
} under plan</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E[&lt;=1000; 1000] (max: total)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E[&lt;=1000; 1000] (max: total) under plan</formula>
			<comment></comment>
		</query>
		<query>
			<formula>saveStrategy("station_strategy.json", plan)</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
